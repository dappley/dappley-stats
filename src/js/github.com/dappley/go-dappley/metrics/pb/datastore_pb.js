/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_dappley_go$dappley_network_pb_peer_pb = require('../../../../../github.com/dappley/go-dappley/network/pb/peer_pb.js');
goog.object.extend(proto, github_com_dappley_go$dappley_network_pb_peer_pb);
goog.exportSymbol('proto.metricspb.BlockStats', null, global);
goog.exportSymbol('proto.metricspb.DataStore', null, global);
goog.exportSymbol('proto.metricspb.ForkStats', null, global);
goog.exportSymbol('proto.metricspb.MemoryStats', null, global);
goog.exportSymbol('proto.metricspb.Metric', null, global);
goog.exportSymbol('proto.metricspb.Metrics', null, global);
goog.exportSymbol('proto.metricspb.Stat', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metricspb.Stat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.metricspb.Stat.oneofGroups_);
};
goog.inherits(proto.metricspb.Stat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metricspb.Stat.displayName = 'proto.metricspb.Stat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metricspb.MemoryStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metricspb.MemoryStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metricspb.MemoryStats.displayName = 'proto.metricspb.MemoryStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metricspb.ForkStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metricspb.ForkStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metricspb.ForkStats.displayName = 'proto.metricspb.ForkStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metricspb.BlockStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metricspb.BlockStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metricspb.BlockStats.displayName = 'proto.metricspb.BlockStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metricspb.Metric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.metricspb.Metric.repeatedFields_, null);
};
goog.inherits(proto.metricspb.Metric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metricspb.Metric.displayName = 'proto.metricspb.Metric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metricspb.DataStore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metricspb.DataStore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metricspb.DataStore.displayName = 'proto.metricspb.DataStore';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metricspb.Metrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.metricspb.Metrics.repeatedFields_, null);
};
goog.inherits(proto.metricspb.Metrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metricspb.Metrics.displayName = 'proto.metricspb.Metrics';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.metricspb.Stat.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.metricspb.Stat.ValueCase = {
  VALUE_NOT_SET: 0,
  TRANSACTION_POOL_SIZE: 2,
  MEMORY_STATS: 3,
  CPU_PERCENTAGE: 4,
  FORK_STATS: 5,
  BLOCK_STATS: 6
};

/**
 * @return {proto.metricspb.Stat.ValueCase}
 */
proto.metricspb.Stat.prototype.getValueCase = function() {
  return /** @type {proto.metricspb.Stat.ValueCase} */(jspb.Message.computeOneofCase(this, proto.metricspb.Stat.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metricspb.Stat.prototype.toObject = function(opt_includeInstance) {
  return proto.metricspb.Stat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metricspb.Stat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.Stat.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transactionPoolSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    memoryStats: (f = msg.getMemoryStats()) && proto.metricspb.MemoryStats.toObject(includeInstance, f),
    cpuPercentage: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    forkStats: (f = msg.getForkStats()) && proto.metricspb.ForkStats.toObject(includeInstance, f),
    blockStats: (f = msg.getBlockStats()) && proto.metricspb.BlockStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metricspb.Stat}
 */
proto.metricspb.Stat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metricspb.Stat;
  return proto.metricspb.Stat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metricspb.Stat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metricspb.Stat}
 */
proto.metricspb.Stat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransactionPoolSize(value);
      break;
    case 3:
      var value = new proto.metricspb.MemoryStats;
      reader.readMessage(value,proto.metricspb.MemoryStats.deserializeBinaryFromReader);
      msg.setMemoryStats(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCpuPercentage(value);
      break;
    case 5:
      var value = new proto.metricspb.ForkStats;
      reader.readMessage(value,proto.metricspb.ForkStats.deserializeBinaryFromReader);
      msg.setForkStats(value);
      break;
    case 6:
      var value = new proto.metricspb.BlockStats;
      reader.readMessage(value,proto.metricspb.BlockStats.deserializeBinaryFromReader);
      msg.setBlockStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metricspb.Stat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metricspb.Stat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metricspb.Stat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.Stat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMemoryStats();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.metricspb.MemoryStats.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getForkStats();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.metricspb.ForkStats.serializeBinaryToWriter
    );
  }
  f = message.getBlockStats();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.metricspb.BlockStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.metricspb.Stat.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.metricspb.Stat.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 transaction_pool_size = 2;
 * @return {number}
 */
proto.metricspb.Stat.prototype.getTransactionPoolSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.metricspb.Stat.prototype.setTransactionPoolSize = function(value) {
  jspb.Message.setOneofField(this, 2, proto.metricspb.Stat.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.metricspb.Stat.prototype.clearTransactionPoolSize = function() {
  jspb.Message.setOneofField(this, 2, proto.metricspb.Stat.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metricspb.Stat.prototype.hasTransactionPoolSize = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MemoryStats memory_stats = 3;
 * @return {?proto.metricspb.MemoryStats}
 */
proto.metricspb.Stat.prototype.getMemoryStats = function() {
  return /** @type{?proto.metricspb.MemoryStats} */ (
    jspb.Message.getWrapperField(this, proto.metricspb.MemoryStats, 3));
};


/** @param {?proto.metricspb.MemoryStats|undefined} value */
proto.metricspb.Stat.prototype.setMemoryStats = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.metricspb.Stat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.metricspb.Stat.prototype.clearMemoryStats = function() {
  this.setMemoryStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metricspb.Stat.prototype.hasMemoryStats = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double cpu_percentage = 4;
 * @return {number}
 */
proto.metricspb.Stat.prototype.getCpuPercentage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.metricspb.Stat.prototype.setCpuPercentage = function(value) {
  jspb.Message.setOneofField(this, 4, proto.metricspb.Stat.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.metricspb.Stat.prototype.clearCpuPercentage = function() {
  jspb.Message.setOneofField(this, 4, proto.metricspb.Stat.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metricspb.Stat.prototype.hasCpuPercentage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ForkStats fork_stats = 5;
 * @return {?proto.metricspb.ForkStats}
 */
proto.metricspb.Stat.prototype.getForkStats = function() {
  return /** @type{?proto.metricspb.ForkStats} */ (
    jspb.Message.getWrapperField(this, proto.metricspb.ForkStats, 5));
};


/** @param {?proto.metricspb.ForkStats|undefined} value */
proto.metricspb.Stat.prototype.setForkStats = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.metricspb.Stat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.metricspb.Stat.prototype.clearForkStats = function() {
  this.setForkStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metricspb.Stat.prototype.hasForkStats = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BlockStats block_stats = 6;
 * @return {?proto.metricspb.BlockStats}
 */
proto.metricspb.Stat.prototype.getBlockStats = function() {
  return /** @type{?proto.metricspb.BlockStats} */ (
    jspb.Message.getWrapperField(this, proto.metricspb.BlockStats, 6));
};


/** @param {?proto.metricspb.BlockStats|undefined} value */
proto.metricspb.Stat.prototype.setBlockStats = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.metricspb.Stat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.metricspb.Stat.prototype.clearBlockStats = function() {
  this.setBlockStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metricspb.Stat.prototype.hasBlockStats = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metricspb.MemoryStats.prototype.toObject = function(opt_includeInstance) {
  return proto.metricspb.MemoryStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metricspb.MemoryStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.MemoryStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    heapInUse: jspb.Message.getFieldWithDefault(msg, 1, 0),
    heapSys: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metricspb.MemoryStats}
 */
proto.metricspb.MemoryStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metricspb.MemoryStats;
  return proto.metricspb.MemoryStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metricspb.MemoryStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metricspb.MemoryStats}
 */
proto.metricspb.MemoryStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeapInUse(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeapSys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metricspb.MemoryStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metricspb.MemoryStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metricspb.MemoryStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.MemoryStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeapInUse();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getHeapSys();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 heap_in_use = 1;
 * @return {number}
 */
proto.metricspb.MemoryStats.prototype.getHeapInUse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.metricspb.MemoryStats.prototype.setHeapInUse = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 heap_sys = 2;
 * @return {number}
 */
proto.metricspb.MemoryStats.prototype.getHeapSys = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.metricspb.MemoryStats.prototype.setHeapSys = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metricspb.ForkStats.prototype.toObject = function(opt_includeInstance) {
  return proto.metricspb.ForkStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metricspb.ForkStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.ForkStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    numForks: jspb.Message.getFieldWithDefault(msg, 1, 0),
    longestFork: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metricspb.ForkStats}
 */
proto.metricspb.ForkStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metricspb.ForkStats;
  return proto.metricspb.ForkStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metricspb.ForkStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metricspb.ForkStats}
 */
proto.metricspb.ForkStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumForks(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLongestFork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metricspb.ForkStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metricspb.ForkStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metricspb.ForkStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.ForkStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumForks();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLongestFork();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 num_forks = 1;
 * @return {number}
 */
proto.metricspb.ForkStats.prototype.getNumForks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.metricspb.ForkStats.prototype.setNumForks = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 longest_fork = 2;
 * @return {number}
 */
proto.metricspb.ForkStats.prototype.getLongestFork = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.metricspb.ForkStats.prototype.setLongestFork = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metricspb.BlockStats.prototype.toObject = function(opt_includeInstance) {
  return proto.metricspb.BlockStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metricspb.BlockStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.BlockStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    numTransactions: jspb.Message.getFieldWithDefault(msg, 1, 0),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metricspb.BlockStats}
 */
proto.metricspb.BlockStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metricspb.BlockStats;
  return proto.metricspb.BlockStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metricspb.BlockStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metricspb.BlockStats}
 */
proto.metricspb.BlockStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumTransactions(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metricspb.BlockStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metricspb.BlockStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metricspb.BlockStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.BlockStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumTransactions();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 num_transactions = 1;
 * @return {number}
 */
proto.metricspb.BlockStats.prototype.getNumTransactions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.metricspb.BlockStats.prototype.setNumTransactions = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 height = 2;
 * @return {number}
 */
proto.metricspb.BlockStats.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.metricspb.BlockStats.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.metricspb.Metric.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metricspb.Metric.prototype.toObject = function(opt_includeInstance) {
  return proto.metricspb.Metric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metricspb.Metric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.Metric.toObject = function(includeInstance, msg) {
  var f, obj = {
    statsList: jspb.Message.toObjectList(msg.getStatsList(),
    proto.metricspb.Stat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metricspb.Metric}
 */
proto.metricspb.Metric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metricspb.Metric;
  return proto.metricspb.Metric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metricspb.Metric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metricspb.Metric}
 */
proto.metricspb.Metric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.metricspb.Stat;
      reader.readMessage(value,proto.metricspb.Stat.deserializeBinaryFromReader);
      msg.addStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metricspb.Metric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metricspb.Metric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metricspb.Metric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.Metric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.metricspb.Stat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Stat stats = 1;
 * @return {!Array<!proto.metricspb.Stat>}
 */
proto.metricspb.Metric.prototype.getStatsList = function() {
  return /** @type{!Array<!proto.metricspb.Stat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.metricspb.Stat, 1));
};


/** @param {!Array<!proto.metricspb.Stat>} value */
proto.metricspb.Metric.prototype.setStatsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.metricspb.Stat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.metricspb.Stat}
 */
proto.metricspb.Metric.prototype.addStats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.metricspb.Stat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.metricspb.Metric.prototype.clearStatsList = function() {
  this.setStatsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metricspb.DataStore.prototype.toObject = function(opt_includeInstance) {
  return proto.metricspb.DataStore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metricspb.DataStore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.DataStore.toObject = function(includeInstance, msg) {
  var f, obj = {
    metricsMap: (f = msg.getMetricsMap()) ? f.toObject(includeInstance, proto.metricspb.Metric.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metricspb.DataStore}
 */
proto.metricspb.DataStore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metricspb.DataStore;
  return proto.metricspb.DataStore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metricspb.DataStore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metricspb.DataStore}
 */
proto.metricspb.DataStore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMetricsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.metricspb.Metric.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metricspb.DataStore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metricspb.DataStore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metricspb.DataStore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.DataStore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetricsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.metricspb.Metric.serializeBinaryToWriter);
  }
};


/**
 * map<string, Metric> metrics = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.metricspb.Metric>}
 */
proto.metricspb.DataStore.prototype.getMetricsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.metricspb.Metric>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.metricspb.Metric));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.metricspb.DataStore.prototype.clearMetricsMap = function() {
  this.getMetricsMap().clear();
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.metricspb.Metrics.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metricspb.Metrics.prototype.toObject = function(opt_includeInstance) {
  return proto.metricspb.Metrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metricspb.Metrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.Metrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataStore: (f = msg.getDataStore()) && proto.metricspb.DataStore.toObject(includeInstance, f),
    peersList: jspb.Message.toObjectList(msg.getPeersList(),
    github_com_dappley_go$dappley_network_pb_peer_pb.PeerInfo.toObject, includeInstance),
    blockStatsList: jspb.Message.toObjectList(msg.getBlockStatsList(),
    proto.metricspb.BlockStats.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metricspb.Metrics}
 */
proto.metricspb.Metrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metricspb.Metrics;
  return proto.metricspb.Metrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metricspb.Metrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metricspb.Metrics}
 */
proto.metricspb.Metrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.metricspb.DataStore;
      reader.readMessage(value,proto.metricspb.DataStore.deserializeBinaryFromReader);
      msg.setDataStore(value);
      break;
    case 2:
      var value = new github_com_dappley_go$dappley_network_pb_peer_pb.PeerInfo;
      reader.readMessage(value,github_com_dappley_go$dappley_network_pb_peer_pb.PeerInfo.deserializeBinaryFromReader);
      msg.addPeers(value);
      break;
    case 3:
      var value = new proto.metricspb.BlockStats;
      reader.readMessage(value,proto.metricspb.BlockStats.deserializeBinaryFromReader);
      msg.addBlockStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metricspb.Metrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metricspb.Metrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metricspb.Metrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metricspb.Metrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataStore();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.metricspb.DataStore.serializeBinaryToWriter
    );
  }
  f = message.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      github_com_dappley_go$dappley_network_pb_peer_pb.PeerInfo.serializeBinaryToWriter
    );
  }
  f = message.getBlockStatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.metricspb.BlockStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional DataStore data_store = 1;
 * @return {?proto.metricspb.DataStore}
 */
proto.metricspb.Metrics.prototype.getDataStore = function() {
  return /** @type{?proto.metricspb.DataStore} */ (
    jspb.Message.getWrapperField(this, proto.metricspb.DataStore, 1));
};


/** @param {?proto.metricspb.DataStore|undefined} value */
proto.metricspb.Metrics.prototype.setDataStore = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.metricspb.Metrics.prototype.clearDataStore = function() {
  this.setDataStore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metricspb.Metrics.prototype.hasDataStore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated networkpb.PeerInfo peers = 2;
 * @return {!Array<!proto.networkpb.PeerInfo>}
 */
proto.metricspb.Metrics.prototype.getPeersList = function() {
  return /** @type{!Array<!proto.networkpb.PeerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, github_com_dappley_go$dappley_network_pb_peer_pb.PeerInfo, 2));
};


/** @param {!Array<!proto.networkpb.PeerInfo>} value */
proto.metricspb.Metrics.prototype.setPeersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.networkpb.PeerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.networkpb.PeerInfo}
 */
proto.metricspb.Metrics.prototype.addPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.networkpb.PeerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.metricspb.Metrics.prototype.clearPeersList = function() {
  this.setPeersList([]);
};


/**
 * repeated BlockStats block_stats = 3;
 * @return {!Array<!proto.metricspb.BlockStats>}
 */
proto.metricspb.Metrics.prototype.getBlockStatsList = function() {
  return /** @type{!Array<!proto.metricspb.BlockStats>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.metricspb.BlockStats, 3));
};


/** @param {!Array<!proto.metricspb.BlockStats>} value */
proto.metricspb.Metrics.prototype.setBlockStatsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.metricspb.BlockStats=} opt_value
 * @param {number=} opt_index
 * @return {!proto.metricspb.BlockStats}
 */
proto.metricspb.Metrics.prototype.addBlockStats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.metricspb.BlockStats, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.metricspb.Metrics.prototype.clearBlockStatsList = function() {
  this.setBlockStatsList([]);
};


goog.object.extend(exports, proto.metricspb);
